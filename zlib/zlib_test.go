// Copyright 2020 Billy G. Allie.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package zlib defines filters to compress/uncompress data using zlib.
// These filters can be connected to other filters via io.Pipes.
package zlib

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"reflect"
	"strings"
	"testing"
)

// formatByteSlice will take a byte slice and format a string
// representation of it.  It will consiste of lines of 16 hexidecimal
// characters seperated by a ', '.
func formatByteSlice(prefix string, src []byte) string {
	var output bytes.Buffer
	output.WriteString(prefix)
	i := 0
	for _, v := range src {
		output.WriteString(fmt.Sprintf("%#02x", v))
		i++
		switch {
		case i == len(src):
			// Do nothine.
		case i%16 == 0:
			output.WriteString(",\n" + prefix)
		default:
			output.WriteString(", ")
		}
	}
	return output.String()
}

func TestToZlib(t *testing.T) {
	type args struct {
		r io.Reader
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "ttz1",
			args: args{r: strings.NewReader("This is only a test of the ToZlib filter.  For the next sixty seconds ...")},
			want: []byte{
				0x78, 0xda, 0x1c, 0xc8, 0xcb, 0x09, 0xc0, 0x20, 0x0c, 0x80, 0xe1, 0x55, 0xfe, 0x09, 0x32, 0x46,
				0x27, 0xf0, 0xd4, 0x5b, 0x1f, 0x11, 0x03, 0x62, 0xc0, 0xe4, 0xa0, 0xdb, 0x17, 0x7a, 0xfd, 0x4a,
				0xb3, 0xc0, 0x02, 0x1f, 0x7d, 0x73, 0x91, 0x1a, 0x89, 0x57, 0xb2, 0x29, 0xc5, 0xcf, 0x6e, 0x37,
				0xd5, 0x7a, 0xea, 0x14, 0x38, 0x7c, 0xfe, 0x3e, 0x74, 0x25, 0x61, 0x2b, 0x37, 0xa1, 0x8f, 0x8f,
				0x37, 0x10, 0x91, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xae, 0x7c, 0x19, 0x37,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ttfRdr := bufio.NewReader(ToZlib(tt.args.r))
			if got, _ := io.ReadAll(ttfRdr); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ToZlib() = %v, want %v", formatByteSlice("", got), formatByteSlice("", tt.want))
			}
		})
	}
}

func TestFromZlib(t *testing.T) {
	type args struct {
		r io.Reader
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "tfz1",
			args: args{r: bytes.NewReader([]byte{
				0x78, 0xda, 0x1c, 0xc9, 0xbb, 0x0d, 0xc4, 0x20, 0x0c, 0x80, 0xe1, 0x55, 0xfe, 0x09, 0x3c, 0x06,
				0x13, 0x5c, 0x75, 0x5d, 0x1e, 0x46, 0x58, 0x22, 0x58, 0xc2, 0x2e, 0x60, 0xfb, 0x48, 0xa9, 0xbf,
				0x5f, 0xb3, 0xc0, 0x02, 0x1f, 0x7d, 0x73, 0x90, 0x1a, 0x89, 0x57, 0xb2, 0x29, 0x65, 0xfa, 0xf3,
				0xef, 0x76, 0x52, 0xad, 0xa7, 0x4e, 0x81, 0xe2, 0xf3, 0x93, 0xa1, 0x2b, 0x09, 0x5b, 0xb9, 0x09,
				0xbd, 0x7c, 0xdc, 0x81, 0x88, 0xbc, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xa6, 0x1a, 0x08,
			})},
			want: "This is only a test of the FromZlib filter.  For the next sixty seconds ...",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tfzRdr := bufio.NewReader(FromZlib(tt.args.r))
			got, _ := io.ReadAll(tfzRdr)
			if string(got) != tt.want {
				t.Errorf("FromZlib() = %v, want %v", string(got), tt.want)
			}
		})
	}
}
